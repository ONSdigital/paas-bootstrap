---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: robertgruber/terraform-resource

- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: paas-bootstrap-git
  type: git
  source:
    uri: https://github.com/ONSdigital/paas-bootstrap.git
    branch: ((branch))

- name: jumpbox-deployment-git
  type: git
  source:
    uri: https://github.com/cppforlife/jumpbox-deployment.git

- name: bosh-deployment-git
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git

- name: cf-deployment-git
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    tag_filter: v*

- name: cf-deployment-concourse-tasks-git
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests-git
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
    
- name: prometheus-deployment-git
  type: git
  source:
    uri: https://github.com/bosh-prometheus/prometheus-boshrelease.git

- name: jumpbox-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: jumpbox/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: vpc-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: vpc/tfstate.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: concourse-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: concourse/tfstate.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: cf-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-vars-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-state-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox-state.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-manifest-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: ssh-private-key-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: concourse/ssh-key.pem
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: bosh/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: databases-bosh-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: bosh-databases/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: cf-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: cf/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: prometheus-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: prometheus/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: cf-databases-terraform
  type: terraform
  source:
    storage:
      bucket: ons-paas-((environment))-states
      bucket_path: cf-databases/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: cf-vars-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf/cf-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))
    initial_version: "-"
    initial_content_text: |
        ---

- name: cf-manifest-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf/cf.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))
    initial_version: "-"
    initial_content_text: |
        ---

- name: prometheus-vars-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: prometheus/prometheus-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: prometheus-manifest-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: prometheus/prometheus.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))
    initial_version: "-"
    initial_content_text: |
        ---

- name: prometheus-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: prometheus/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: cf-cloud-config-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf/cloud-config.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-vars-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-state-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh-state.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-manifest-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: databases-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf-databases/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))


- name: bosh-databases-tfstate-s3
  type: s3-iam
  source:
    bucket: ons-paas-((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh-databases/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_webhook_uri))

jobs:
- name: verify-concourse
  serial: true
  plan:
  - get: paas-bootstrap-git
    trigger: true
  - get: concourse-tfstate-s3
  - aggregate:
    - task: ensure world cannot connect to concourse on port 22
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: concourse
        DOMAIN: ((domain))
        PORT: 22
        EXPECTED_OUTCOME: failure
    - task: ensure world cannot connect to concourse on port 6868
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: concourse
        DOMAIN: ((domain))
        PORT: 6868
        EXPECTED_OUTCOME: failure
    - task: ensure world cannot connect to concourse (ci) on port 443
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: ci
        DOMAIN: ((domain))
        PORT: 443
        EXPECTED_OUTCOME: failure
    - task: ensure that direct FQDN of concourse matches its endpoint
      file: paas-bootstrap-git/ci/tasks/concourse/test_fqdn/task.yml
      params:
        HOST: concourse
        DOMAIN: ((domain))
    - task: ensure concourse cannot perform disallowed action
      file: paas-bootstrap-git/ci/tasks/concourse/test_iam_policy/task.yml

- name: terraform-jumpbox
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: concourse-tfstate-s3
    - get: vpc-tfstate-s3
    - get: paas-bootstrap-git
      passed: [ verify-concourse ]
      trigger: true
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/jumpbox/get_terraform_vars/task.yml
  - put: jumpbox-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/jumpbox/aws
      env_name: ((environment))
      var_files:
      - concourse-vars/vars.json
      - vpc-vars/vars.json

- name: terraform-bosh
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: concourse-tfstate-s3
    - get: jumpbox-terraform
    - get: vpc-tfstate-s3
    - get: jumpbox-tfstate-s3
    - get: paas-bootstrap-git
      passed: [terraform-jumpbox]
      trigger: true
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/bosh/get_terraform_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - put: bosh-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/bosh/aws
      env_name: ((environment))
      var_files:
      - concourse-vars/vars.json
      - jumpbox-terraform/metadata
      - vpc-vars/vars.json

- name: terraform-bosh-databases
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: vpc-tfstate-s3
    - get: bosh-terraform
      passed: [terraform-bosh]
      params:
        output_statefile: true
    - get: paas-bootstrap-git
      trigger: true
      passed: [terraform-bosh]
  - task: get database vars
    file: paas-bootstrap-git/ci/tasks/bosh/get_database_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - task: bosh db connectivity test
    file: paas-bootstrap-git/ci/tasks/bosh/db_connectivity_test/task.yml
    timeout: 5m
  - put: databases-bosh-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/bosh-databases/aws
      env_name: ((environment))
      var_files:
      - vpc-vars/vars.json
      - bosh-vars/vars.json

- name: terraform-cf
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: vpc-tfstate-s3
    - get: jumpbox-tfstate-s3
    - get: bosh-tfstate-s3
    - get: concourse-tfstate-s3
    - get: paas-bootstrap-git
      trigger: true
      passed: [terraform-bosh-databases]
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/cf/get_terraform_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - put: cf-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/cf/aws
      env_name: ((environment))
      var_files:
      - vpc-vars/vars.json
      - jumpbox-vars/vars.json
      - bosh-vars/vars.json
      - concourse-vars/vars.json

- name: terraform-cf-databases
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: vpc-tfstate-s3
    - get: cf-tfstate-s3
    - get: paas-bootstrap-git
      trigger: true
      passed: [terraform-cf]
  - task: get-database-vars
    file: paas-bootstrap-git/ci/tasks/cf/databases/get_database_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - put: cf-databases-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/cf-databases/aws
      env_name: ((environment))
      var_files:
      - vpc-vars/vars.json
      - cf-vars/vars.json

- name: verify-terraform-cf
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - get: paas-bootstrap-git
    trigger: true
    passed: [terraform-cf-databases]
  - aggregate:
    - task: ensure that system FQDN is resolvable
      file: paas-bootstrap-git/ci/tasks/cf/test/task.yml
      params:
        HOST: test.system
        DOMAIN: ((domain))
    - task: ensure that apps FQDN is resolvable
      file: paas-bootstrap-git/ci/tasks/cf/test/task.yml
      params:
        HOST: test.apps
        DOMAIN: ((domain))

- name: terraform-prometheus
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      passed: [verify-terraform-cf]
      trigger: true
    - get: vpc-tfstate-s3
    - get: concourse-tfstate-s3
    - get: bosh-tfstate-s3
    - get: cf-tfstate-s3
    - get: jumpbox-tfstate-s3
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/prometheus/get_terraform_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - put: prometheus-terraform
    params:
      terraform_source: paas-bootstrap-git/terraform/prometheus/aws
      env_name: ((environment))
      var_files:
      - vpc-vars/vars.json
      - concourse-vars/vars.json
      - bosh-vars/vars.json
      - cf-vars/vars.json
      - jumpbox-vars/vars.json

- name: create-jumpbox
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      passed: [terraform-prometheus]
      trigger: true
    - get: jumpbox-deployment-git
      version: { ref: ((jumpbox_commit_ref)) }
    - get: jumpbox-terraform
      passed: [terraform-jumpbox]
    - get: jumpbox-vars-s3
    - get: jumpbox-state-s3
    - get: ssh-private-key-s3
    - get: concourse-tfstate-s3
  - task: interpolate-jumpbox
    file: paas-bootstrap-git/ci/tasks/jumpbox/interpolate/task.yml
    params:
      ENVIRONMENT: ((environment))
    on_success:
      aggregate:
      - put: jumpbox-vars-s3
        params:
          file: jumpbox-manifests/jumpbox-variables.yml
      - put: jumpbox-manifest-s3
        params:
          file: jumpbox-manifests/jumpbox.yml
  - task: deploy-jumpbox
    file: paas-bootstrap-git/ci/tasks/jumpbox/deploy/task.yml
    on_success:
      put: jumpbox-state-s3
      params:
        file: jumpbox-state/jumpbox-state.json
    on_failure:
      put: jumpbox-state-s3
      params:
        file: jumpbox-state/jumpbox-state.json

- name: verify-jumpbox
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - get: paas-bootstrap-git
    passed: [create-jumpbox]
    trigger: true
  - aggregate:
    - get: jumpbox-vars-s3
    - get: jumpbox-manifest-s3
  - aggregate:
    - task: ensure concourse can SSH to jumpbox
      file: paas-bootstrap-git/ci/tasks/jumpbox/test/task.yml
      params:
        ENVIRONMENT: ((environment))
    - task: ensure world cannot connect to jumpbox on port 22
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: jumpbox
        DOMAIN: ((domain))
        PORT: 22
        EXPECTED_OUTCOME: failure
    - task: ensure world cannot connect to jumpbox on port 6868
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: jumpbox
        DOMAIN: ((domain))
        PORT: 6868
        EXPECTED_OUTCOME: failure
    - task: ensure that FQDN of jumpbox matches its endpoint
      file: paas-bootstrap-git/ci/tasks/jumpbox/test_fqdn/task.yml
      params:
        HOST: jumpbox
        DOMAIN: ((domain))

- name: create-bosh
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      passed: [verify-jumpbox]
      trigger: true
    - get: bosh-deployment-git
      version: { ref: ((bosh_commit_ref)) }
    - get: bosh-terraform
      passed: [terraform-bosh]
    - get: bosh-tfstate-s3
    - get: bosh-vars-s3
    - get: bosh-state-s3
    - get: ssh-private-key-s3
    - get: concourse-tfstate-s3
    - get: bosh-databases-tfstate-s3
    - get: vpc-tfstate-s3
  - task: interpolate-bosh
    file: paas-bootstrap-git/ci/tasks/bosh/interpolate/task.yml
    params:
      ENVIRONMENT: ((environment))
    on_success:
      aggregate:
      - put: bosh-vars-s3
        params:
          file: bosh-manifests/bosh-variables.yml
      - put: bosh-manifest-s3
        params:
          file: bosh-manifests/bosh.yml
  - task: deploy-bosh
    file: paas-bootstrap-git/ci/tasks/bosh/deploy/task.yml
    on_success:
      put: bosh-state-s3
      params:
        file: bosh-state/bosh-state.json
  - task: deploy-bosh-node-exporter
    file: paas-bootstrap-git/ci/tasks/bosh/deploy_node_exporter/task.yml
    params:
      NODE_EXPORTER_VERSION: ((node_exporter_version))

- name: verify-bosh
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - get: paas-bootstrap-git
    passed: [create-bosh]
    trigger: true
  - aggregate:
    - get: bosh-vars-s3
    - get: bosh-manifest-s3
  - task: verify
    file: paas-bootstrap-git/ci/tasks/bosh/test/task.yml

- name: deploy-cf
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      trigger: true
      passed: [verify-bosh]
    - get: cf-deployment-git
      version: { ref: ((cf_tag)) }
    - get: prometheus-deployment-git
      version: { ref: ((prometheus_commit_ref)) }
    - get: vpc-tfstate-s3
    - get: bosh-tfstate-s3
    - get: cf-tfstate-s3
    - get: cf-vars-s3
    - get: bosh-vars-s3
    - get: bosh-manifest-s3
    - get: cf-manifest-s3
    - get: concourse-tfstate-s3
    - get: jumpbox-tfstate-s3
    - get: databases-tfstate-s3
    - get: prometheus-tfstate-s3
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/cf/get_terraform_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - task: interpolate-cf
    file: paas-bootstrap-git/ci/tasks/cf/interpolate/task.yml
    params:
      ENVIRONMENT: ((environment))
      DOMAIN: ((domain))
    on_success:
      aggregate:
      - put: cf-vars-s3
        params:
          file: cf-manifests/cf-variables.yml
      - put: cf-manifest-s3
        params:
          file: cf-manifests/cf.yml
  - task: cloud_config
    file: paas-bootstrap-git/ci/tasks/cf/cloud_config/task.yml
    params:
      ENVIRONMENT: ((environment))
      DOMAIN: ((domain))
    on_success:
      aggregate:
      - put: cf-cloud-config-s3
        params:
          file: cf-manifests/cloud-config.yml
  - task: deploy-stemcell
    file: paas-bootstrap-git/ci/tasks/cf/upload_stemcell/task.yml
  - task: deploy_cf
    file: paas-bootstrap-git/ci/tasks/cf/deploy_cf/task.yml
    on_failure:
      put: slack-alert
      params:
        text: |
          Environment: ((environment))
          Job/Task:    deploy_cf/deploy_cf
          Build Name:  $BUILD_NAME
          Build ID:    $BUILD_ID
          Result:      FAIL

- name: verify-cf-endpoints
  serial: true
  serial_groups: [cf,prometheus,smoke-tests,cats]
  plan:
  - get: paas-bootstrap-git
    passed: [deploy-cf]
    trigger: true
  - aggregate:
    - task: ensure CF api responds
      file: paas-bootstrap-git/ci/tasks/common/test_endpoint/task.yml
      params:
        HOST: api.system
        DOMAIN: ((domain))
        QUERY_PATH: /v2/info
    - task: ensure CF UAA responds
      file: paas-bootstrap-git/ci/tasks/common/test_endpoint/task.yml
      params:
        HOST: uaa.system
        DOMAIN: ((domain))
        QUERY_PATH: /info
        REQUIRE_JSON: true

- name: cf-smoke-tests
  serial: true
  serial_groups: [smoke-tests]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      passed: [verify-cf-endpoints]
      trigger: true
    - get: bosh-vars-s3
    - get: bosh-manifest-s3
  - task: ensure smoke tests pass
    file: paas-bootstrap-git/ci/tasks/cf/smoke_tests/task.yml

- name: cats
  serial: true
  serial_groups: [cats]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      trigger: true
      passed: [verify-cf-endpoints]
    - get: cf-deployment-concourse-tasks-git
    - get: cf-acceptance-tests-git
    - get: cf-vars-s3
  - task: interpolate CATS config
    file: paas-bootstrap-git/ci/tasks/cf/interpolate_cats/task.yml
    params:
      DOMAIN: ((domain))
      ENVIRONMENT: ((environment))
      CATS_CONFIG_FILE: paas-bootstrap-git/profiles/staging/cats_config.json
  - task: run CATS tests
    file: cf-deployment-concourse-tasks-git/run-cats/task.yml
    input_mapping:
      cf-deployment-concourse-tasks: cf-deployment-concourse-tasks-git
      cf-acceptance-tests: cf-acceptance-tests-git
    params:
      CAPTURE_CONFIG: true
    on_failure:
      put: slack-alert
      params:
        text: |
          Environment: ((environment))
          Job/Task:    cats/run CATS tests
          Build Name:  $BUILD_NAME
          Build ID:    $BUILD_ID
          Result:      FAIL

- name: deploy-prometheus
  serial: true
  serial_groups: [prometheus]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      trigger: true
      passed: [verify-cf-endpoints]
    - get: prometheus-deployment-git
      version: { ref: ((prometheus_commit_ref)) }
    - get: prometheus-vars-s3
    - get: vpc-tfstate-s3
    - get: bosh-tfstate-s3
    - get: cf-tfstate-s3
    - get: cf-vars-s3
    - get: bosh-vars-s3
    - get: bosh-manifest-s3
    - get: prometheus-tfstate-s3
    - get: jumpbox-tfstate-s3
  - task: interpolate-prometheus
    file: paas-bootstrap-git/ci/tasks/prometheus/interpolate/task.yml
    params:
      ENVIRONMENT: ((environment))
      DOMAIN: ((domain))
      CF_DEPLOYMENT_NAME: ((cf_deployment_name))
    on_success:
      aggregate:
      - put: prometheus-vars-s3
        params:
          file: prometheus-manifests/prometheus-variables.yml
      - put: prometheus-manifest-s3
        params:
          file: prometheus-manifests/prometheus.yml
  - task: deploy_prometheus
    file: paas-bootstrap-git/ci/tasks/prometheus/deploy/task.yml

- name: verify-prometheus
  serial: true
  serial_groups: [prometheus]
  plan:
  - get: paas-bootstrap-git
    passed: [deploy-prometheus]
    trigger: true
  - aggregate:
    - task: ensure concourse can connect to grafana on port 443
      file: paas-bootstrap-git/ci/tasks/common/test_connectivity/task.yml
      params:
        HOST: grafana
        DOMAIN: ((domain))
        PORT: 443
        EXPECTED_OUTCOME: success

- name: deploy-dashboard-snapshots
  serial: true
  serial_groups: [prometheus]
  plan:
  - aggregate:
    - get: paas-bootstrap-git
      trigger: true
      passed: [verify-prometheus]
    - get: prometheus-manifest-s3
    - get: prometheus-tfstate-s3
  - task: create radiator snapshot(s)
    file: paas-bootstrap-git/ci/tasks/prometheus/dashboard/task.yml
    params:
      ENVIRONMENT: ((environment))
      SNAPSHOT_NAME: radiator
      TEMPLATE: paas-bootstrap-git/grafana/bosh_cpu.json

- name: cf-management
  serial: true
  serial_groups: [cf]
  plan:
  - get: paas-bootstrap-git
    trigger: true
    passed: [verify-cf-endpoints]
  - get: cf-vars-s3  
  - task: get management variables
    file: paas-bootstrap-git/ci/tasks/cf/get_management_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
      DOMAIN: ((domain))  
  - task: create orgs spaces etc
    file: paas-bootstrap-git/ci/tasks/cf/management/task.yml
    params:
      ENVIRONMENT: ((environment))