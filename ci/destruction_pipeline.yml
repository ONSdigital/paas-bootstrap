---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: robertgruber/terraform-resource

- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource

resources:
- name: paas-bootstrap-git
  type: git
  source:
    uri: https://github.com/ONSdigital/paas-bootstrap.git
    branch: ((branch))

- name: bosh-deployment-git
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git

- name: manual-force
  type: time
  source:
    interval: 24000h

- name: jumpbox-terraform
  type: terraform
  source:
    storage:
      bucket: ((environment))-states
      bucket_path: jumpbox/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-tfstate-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-vars-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-state-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox-state.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: jumpbox-manifest-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: jumpbox/jumpbox.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-terraform
  type: terraform
  source:
    storage:
      bucket: ((environment))-states
      bucket_path: bosh/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-tfstate-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/((environment)).tfstate
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-vars-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh-variables.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-state-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh-state.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: bosh-manifest-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: bosh/bosh.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: cf-manifest-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: cf/cf.yml
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))
    initial_version: "-"
    initial_content_text: |
        ---

- name: vpc-tfstate-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: vpc/tfstate.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))


- name: concourse-tfstate-s3
  type: s3-iam
  source:
    bucket: ((environment))-states
    private: true
    region_name: ((region))
    versioned_file: concourse/tfstate.json
    server_side_encryption: 'aws:kms'
    sse_kms_key_id: ((s3_kms_key_id))

- name: cf-terraform
  type: terraform
  source:
    storage:
      bucket: ((environment))-states
      bucket_path: cf/
      use_ec2_role: true
      region_name: ((region))
      server_side_encryption: 'aws:kms'
      sse_kms_key_id: ((s3_kms_key_id))

jobs:
- name: trigger-destroy
  serial_groups: [destruction]
  serial: true
  plan:
    - get: manual-force

- name: destroy-cf
  serial_groups: [destruction]
  serial: true
  plan:
  - aggregate:
    - get: manual-force
      trigger: true
      passed: [trigger-destroy]
    - get: paas-bootstrap-git
    - get: bosh-vars-s3
    - get: bosh-manifest-s3
    - get: cf-manifest-s3
    - get: vpc-tfstate-s3
    - get: bosh-tfstate-s3
    - get: concourse-tfstate-s3
    - get: jumpbox-tfstate-s3
  - task: destroy-cf
    file: paas-bootstrap-git/ci/tasks/cf/destroy/task.yml
    params:
      ENVIRONMENT: ((environment))
    on_success:
      task: empty-buckets
      file: paas-bootstrap-git/ci/tasks/destroy/empty_buckets/task.yml
      params:
        ONS_PREFIX: ons-paas
        ENVIRONMENT: ((environment))
        NAMESPACE: cf
      on_success:
        put: cf-terraform
        params:
          terraform_source: paas-bootstrap-git/terraform/cf/aws
          env_name: ((environment))
          var_files:
          - vpc-vars/vars.json
          - bosh-vars/vars.json
          - concourse-vars/vars.json
          - jumpbox-vars/vars.json
          action: destroy
        get_params:
          action: destroy

- name: destroy-bosh
  serial_groups: [destruction]
  serial: true
  plan:
  - aggregate:
    - get: manual-force
      trigger: true
      passed: [destroy-cf]
    - get: paas-bootstrap-git
    - get: bosh-deployment-git
      version: { ref: ((bosh_commit_ref)) }
    - get: bosh-tfstate-s3
    - get: bosh-vars-s3
    - get: bosh-state-s3
    - get: bosh-manifest-s3
    - get: vpc-tfstate-s3
    - get: concourse-tfstate-s3
    - get: jumpbox-tfstate-s3
  - task: get-terraform-vars
    file: paas-bootstrap-git/ci/tasks/bosh/get_terraform_vars/task.yml
    params:
      ENVIRONMENT: ((environment))
  - task: destroy-bosh
    file: paas-bootstrap-git/ci/tasks/bosh/destroy/task.yml
    on_success:
      aggregate:
      - put: bosh-state-s3
        params:
          file: bosh-state/bosh-state.json
      - put: bosh-terraform
        params:
          terraform_source: paas-bootstrap-git/terraform/bosh/aws
          env_name: ((environment))
          var_files:
          - vpc-vars/vars.json
          - concourse-vars/vars.json
          - jumpbox-vars/vars.json
          action: destroy
        get_params:
          action: destroy

- name: destroy-jumpbox
  serial_groups: [destruction]
  serial: true
  plan:
  - aggregate:
    - get: manual-force
      trigger: true
      passed: [destroy-bosh]
    - get: paas-bootstrap-git
    - get: jumpbox-tfstate-s3
    - get: jumpbox-vars-s3
    - get: jumpbox-state-s3
    - get: jumpbox-manifest-s3
    - get: vpc-tfstate-s3
    - get: concourse-tfstate-s3
  - task: destroy-jumpbox
    file: paas-bootstrap-git/ci/tasks/jumpbox/destroy/task.yml
    params:
      ENVIRONMENT: ((environment))
    on_success:
      put: jumpbox-state-s3
      params:
        file: jumpbox-state/jumpbox-state.json
      put: jumpbox-terraform
      params:
        terraform_source: paas-bootstrap-git/terraform/jumpbox/aws
        env_name: ((environment))
        var_files:
        - vpc-vars/vars.json
        - concourse-vars/vars.json
        - jumpbox-vars/vars.json
        action: destroy
      get_params:
        action: destroy

